{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPhwLn35vNHg6wpEYMG62Sb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JLMoIYj-rkSl","executionInfo":{"status":"ok","timestamp":1746335298182,"user_tz":-330,"elapsed":3541,"user":{"displayName":"000 111","userId":"14195104500313090051"}},"outputId":"0099bfb9-3983-4bf5-9d36-18f8fb42b3a8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Top 5 Similar Movies for Each Movie:\n","\n","Avatar:\n","title\n","Superman Returns              1.0\n","Man of Steel                  1.0\n","X-Men: Days of Future Past    1.0\n","Jupiter Ascending             1.0\n","The Wolverine                 1.0\n","Name: Avatar, dtype: float64\n","\n","Pirates of the Caribbean: At World's End:\n","title\n","Spider-Man 3                                   1.0\n","Batman v Superman: Dawn of Justice             1.0\n","Pirates of the Caribbean: Dead Man's Chest     1.0\n","Pirates of the Caribbean: On Stranger Tides    1.0\n","The Hobbit: The Battle of the Five Armies      1.0\n","Name: Pirates of the Caribbean: At World's End, dtype: float64\n","\n","Spectre:\n","title\n","The Art of War      1.000\n","Speed               1.000\n","Kick-Ass 2          1.000\n","Gridiron Gang       0.939\n","Reno 911!: Miami    0.919\n","Name: Spectre, dtype: float64\n","\n","The Dark Knight Rises:\n","title\n","The Dark Knight                          1.0\n","The Fast and the Furious: Tokyo Drift    1.0\n","The Siege                                1.0\n","Need for Speed                           1.0\n","Man on Fire                              1.0\n","Name: The Dark Knight Rises, dtype: float64\n","\n","John Carter:\n","title\n","Avengers: Age of Ultron                1.0\n","The Avengers                           1.0\n","Captain America: Civil War             1.0\n","Iron Man 3                             1.0\n","Transformers: Revenge of the Fallen    1.0\n","Name: John Carter, dtype: float64\n","\n","Top 5 Recommended Movies from the Most Watched Genre:\n","Manito\n","Bang\n","Good Will Hunting\n","The Color of Money\n","Tiger Orange\n"]}],"source":["\n","#EXPERIMENT 1  : Analyze the functions of a recommender system using a  real-world dataset (e.g., movie or product  recommendations).\n","\n","import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import cosine_similarity\n","import numpy as np\n","\n","# Load the dataset\n","df = pd.read_csv('movie_dataset.csv')\n","\n","# Check required columns\n","if 'genres' not in df.columns or 'title' not in df.columns:\n","    raise ValueError(\"Dataset must contain 'title' and 'genres' columns.\")\n","\n","# Fill missing values\n","df['title'] = df['title'].fillna('Unknown')\n","df['genres'] = df['genres'].fillna('')\n","\n","# Create TF-IDF matrix\n","vectorizer = TfidfVectorizer(stop_words='english')\n","tfidf_matrix = vectorizer.fit_transform(df['genres'])\n","\n","# Compute cosine similarity\n","cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n","\n","# Create a DataFrame of similarities\n","top_similar_movies = pd.DataFrame(cosine_sim, index=df['title'], columns=df['title']).round(3)\n","\n","print(\"Top 5 Similar Movies for Each Movie:\")\n","for movie in df['title'][:5]:\n","    top_similar = top_similar_movies[movie].nlargest(6)[1:]  # exclude the movie itself\n","    print(f\"\\n{movie}:\")\n","    print(top_similar)\n","\n","# Function to recommend based on the most common genre\n","def get_recommendations_based_on_genre(df, cosine_sim, top_n=5):\n","    genre_counts = df['genres'].str.split('|').explode().value_counts()\n","    most_watched_genre = genre_counts.idxmax()\n","\n","    genre_filtered_indices = df[df['genres'].str.contains(most_watched_genre, case=False, na=False)].index\n","    sim_scores = cosine_sim[genre_filtered_indices].sum(axis=0)\n","\n","    sorted_indices = np.argsort(sim_scores)[::-1]\n","    recommended_movies = df['title'].iloc[sorted_indices].unique().tolist()\n","\n","    return recommended_movies[:top_n]\n","\n","# Function to evaluate recommendation\n","def evaluate_recommendation_based_on_genre(df, cosine_sim):\n","    recs = get_recommendations_based_on_genre(df, cosine_sim)\n","    if recs:\n","        print(\"\\nTop 5 Recommended Movies from the Most Watched Genre:\")\n","        for movie in recs:\n","            print(movie)\n","    else:\n","        print(\"No recommendations based on the most watched genre.\")\n","\n","# Evaluate recommendations\n","evaluate_recommendation_based_on_genre(df, cosine_sim)\n"]}]}